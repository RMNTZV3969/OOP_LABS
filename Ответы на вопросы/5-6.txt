1. Перечислите 5 специальных методов классов.
	-Конструктор: Метод, который вызывается при создании нового объекта класса. Конструкторы используются для инициализации объекта и его свойств.
	-Деструктор: Метод, который вызывается при уничтожении объекта класса. Деструкторы используются для выполнения очистки ресурсов или завершения работы объекта перед его удалением из памяти.
	-Методы доступа (геттеры и сеттеры): Специальные методы, которые позволяют получить (геттер) или установить (сеттер) значение определенного свойства объекта класса. Используются для обеспечения инкапсуляции данных и контроля доступа к ним.
	-Магические методы: Специальные методы, начинающиеся и заканчивающиеся на два подчеркивания, которые позволяют классам выполнять определенные действия автоматически в различных ситуациях. Например, методы toString(), construct(), get() и другие.
	-Статические методы: Методы класса, которые могут быть вызваны без создания экземпляра объекта. Они связаны с самим классом, а не с конкретным объектом, и могут использоваться для выполнения действий, не требующих доступа к состоянию конкретного экземпляра класса.

2. Какой метод необходимо определить в классе, что бы его можно было получить его хеш?
Для того чтобы объект класса в Python можно было использовать в качестве ключа в словарях или для сравнения на равенство/неравенство, необходимо определить метод __hash__() в классе. Этот метод определяет способ вычисления хеш-значения для объекта и должен возвращать целое число. 

3. Для чего используется функция isinstance?
Функция isinstance() в Python используется для проверки принадлежности объекта определенному классу или типу данных.

4. Если стоит задача реализации метода сложения двух экземпляров класса, то какой метод класса вы будете использовать?
Для реализации метода сложения двух экземпляров класса в Python, вы можете использовать метод __add__. Метод __add__ позволяет определить поведение оператора сложения + для экземпляров вашего класса.

5. Для чего используется функция hash? Какие аргументы она принимает?
Функция hash() в Python используется для получения хэш-значения объекта, которое является целочисленным числом, уникальным для данного объекта. Хэш-значение объекта используется в словарях (dict) и множествах (set) для быстрого поиска и сравнения объектов.
Функция hash() принимает один аргумент - объект, для которого нужно вычислить хэш-значение. Вот некоторые важные моменты об использовании функции hash():
	1. Для объекта, у которого определен метод __hash__(), функция hash() будет использовать этот метод для вычисления хэш-значения.
	2. Для неизменяемых объектов, таких как строки, числа и кортежи, хэш-значения являются неизменяемыми и будут одинаковыми при равных значениях объектов.
	3. Для изменяемых объектов, таких как списки и многие пользовательские классы, хэш-значение не может быть вычислено, и вызов hash() для таких объектов вызовет исключение TypeError.


6. Какие хешируемые типы данных есть по умолчанию?
В Python существует несколько встроенных типов данных, которые являются хешируемыми (то есть могут быть использованы в качестве ключей в словарях или элементов в множествах). Вот некоторые из них:
	1. Неизменяемые (immutable) типы данных:
   - int: Целые числа.
   - float: Вещественные числа.
   - str: Строки.
   - tuple: Кортежи.
   - frozenset: Замороженные множества.
	2. Другие неизменяемые объекты:
   - None: Единственный экземпляр None является хешируемым.
   - bool: Логические значения True и False.
Эти типы данных являются хешируемыми по умолчанию, потому что они являются неизменяемыми. Использование их в качестве ключей словаря или элементов множества обычно не вызывает проблем связанных с хэшированием.

7. Как изменить поведение объекта при обращении к его атрибутам?
можно изменить поведение объекта при обращении к его атрибутам, используя специальные методы, известные как "магические методы" или "специальные методы" в Python. Например, вы можете определить методы __getattr__, __setattr__, __delattr__, которые позволяют управлять доступом к атрибутам объекта.