1.Как объявить класс? Как создать экземпляр класса?
Нужно написать ключевое слово  class, далее название класса с большой буквы.
А для создания экземпляра класса создать переменную.

2. Что такое наследование? Приведите пример.
Наследование — это один из основных принципов объектно-ориентированного программирования, когда новый класс (подкласс) может наследовать атрибуты и методы уже существующего класса (родительского класса). Подкласс может расширять или изменять функциональность родительского класса по своему усмотрению.
class Animal:  # Родительский класс
    def __init__(self, name):
        self.name = name
    def speak(self):
        pass
class Dog(Animal):  # Подкласс, наследуем от класса Animal
    def speak(self):
        return "Woof!"
class Cat(Animal):  # Еще один подкласс, наследуем от класса Animal
    def speak(self):
        return "Meow!"
# Создаем экземпляры классов
dog = Dog("Rex")
cat = Cat("Fluffy")
# Вызываем метод speak для каждого экземпляра
print(dog.name + " says: " + dog.speak())  # Вывод: Rex says: Woof!
print(cat.name + " says: " + cat.speak())  # Вывод: Fluffy says: Meow!

В этом примере классы Dog и Cat наследуют атрибут name и метод speak() от родительского класса Animal, но имеют возможность переопределить метод speak() для указания своего собственного поведения.

3. Для чего используется полиморфизм?
 позволяет объектам дочерних классов быть использованными вместо объектов родительского класса. Это значит, что функции или методы, ожидающие объект родительского класса, могут работать с объектами дочерних классов без изменений.

4. Что такое инкапсуляция и сокрытие данных класса?
Инкапсуляция – это упаковка данных в единый компонент. Сокрытие – это механизм, позволяющий ограничить доступ к данным вне какой-то области.

5. Как скрыть метод или атрибут?
Язык программирования Python позволяет определить приватные или закрытые атрибуты. Для этого имя атрибута должно начинаться с двойного подчеркивания - __name.

6. Что такое super в рамках класса?
super() – супер класс в Python. super() – это встроенная функция языка Python. ключевое слово super используется для обращения к методам, определенным в родительском классе. Это позволяет вам вызывать методы родительского класса из дочернего класса без явного указания имени родительского класса. Применение super особенно полезно в случаях, когда у вас есть множественное наследование.

7. Для чего нужен метод __init__?
Метод __init__ в Python - это специальный метод (инициализатор), который автоматически вызывается при создании нового экземпляра класса. Его главная цель - инициализировать объект класса, устанавливая начальные значения атрибутов объекта.

8. Для чего нужен метод __setattr__?
Метод setattr в Python используется для установки значения атрибута объекта. Он позволяет динамически изменить или создать атрибут у объекта, не обращаясь к нему напрямую. 


9. Если обратиться к несуществующему атрибуту, то это приведет к
ошибке, к какой?
Если вы попытаетесь обратиться к несуществующему атрибуту объекта в Python, это приведет к возникновению ошибки AttributeError. Данная ошибка возникает, когда вы пытаетесь получить доступ к атрибуту объекта, которого не существует. Например, если попытаться обратиться к атрибуту nonexistent_attr объекта obj, и этого атрибута не существует, то будет сгенерировано исключение AttributeError.